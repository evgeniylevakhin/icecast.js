{
"src/Icecast/PlaylistParser/M3U.ts":{"path":"src/Icecast/PlaylistParser/M3U.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"3":{"start":{"line":8,"column":0},"end":{"line":86,"column":1}},"4":{"start":{"line":8,"column":18},"end":{"line":8,"column":32}},"5":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":16}},"7":{"start":{"line":23,"column":9},"end":{"line":57,"column":3}},"8":{"start":{"line":23,"column":2},"end":{"line":57,"column":3}},"9":{"start":{"line":24,"column":4},"end":{"line":56,"column":7}},"10":{"start":{"line":25,"column":6},"end":{"line":25,"column":40}},"11":{"start":{"line":26,"column":6},"end":{"line":26,"column":60}},"12":{"start":{"line":27,"column":6},"end":{"line":27,"column":74}},"13":{"start":{"line":30,"column":6},"end":{"line":51,"column":9}},"14":{"start":{"line":31,"column":8},"end":{"line":31,"column":36}},"15":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"16":{"start":{"line":34,"column":10},"end":{"line":34,"column":17}},"17":{"start":{"line":36,"column":8},"end":{"line":41,"column":9}},"18":{"start":{"line":37,"column":10},"end":{"line":37,"column":68}},"19":{"start":{"line":39,"column":10},"end":{"line":39,"column":66}},"20":{"start":{"line":40,"column":10},"end":{"line":40,"column":17}},"21":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"22":{"start":{"line":43,"column":10},"end":{"line":43,"column":66}},"23":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"24":{"start":{"line":46,"column":9},"end":{"line":46,"column":46}},"25":{"start":{"line":48,"column":8},"end":{"line":48,"column":39}},"26":{"start":{"line":49,"column":8},"end":{"line":49,"column":41}},"27":{"start":{"line":50,"column":8},"end":{"line":50,"column":34}},"28":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"29":{"start":{"line":53,"column":8},"end":{"line":53,"column":53}},"30":{"start":{"line":55,"column":6},"end":{"line":55,"column":35}},"31":{"start":{"line":66,"column":10},"end":{"line":85,"column":3}},"32":{"start":{"line":67,"column":4},"end":{"line":67,"column":58}},"33":{"start":{"line":68,"column":4},"end":{"line":68,"column":25}},"34":{"start":{"line":69,"column":4},"end":{"line":69,"column":57}},"35":{"start":{"line":70,"column":4},"end":{"line":70,"column":71}},"36":{"start":{"line":72,"column":4},"end":{"line":72,"column":36}},"37":{"start":{"line":73,"column":4},"end":{"line":73,"column":55}},"38":{"start":{"line":77,"column":4},"end":{"line":77,"column":49}},"39":{"start":{"line":79,"column":4},"end":{"line":83,"column":6}},"40":{"start":{"line":81,"column":14},"end":{"line":81,"column":55}},"41":{"start":{"line":84,"column":4},"end":{"line":84,"column":17}},"42":{"start":{"line":86,"column":0},"end":{"line":86,"column":1}},"43":{"start":{"line":88,"column":0},"end":{"line":88,"column":13}}},"fnMap":{"1":{"name":"(anonymous_826)","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"M3U","line":14,"loc":{"start":{"line":14,"column":2},"end":{"line":14,"column":26}}},"3":{"name":"(anonymous_828)","line":23,"loc":{"start":{"line":23,"column":2},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_829)","line":24,"loc":{"start":{"line":24,"column":23},"end":{"line":24,"column":59}}},"5":{"name":"(anonymous_830)","line":30,"loc":{"start":{"line":30,"column":20},"end":{"line":30,"column":36}}},"6":{"name":"(anonymous_831)","line":66,"loc":{"start":{"line":66,"column":2},"end":{"line":66,"column":85}}},"7":{"name":"(anonymous_832)","line":80,"loc":{"start":{"line":80,"column":6},"end":{"line":80,"column":22}}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":7}},{"start":{"line":33,"column":8},"end":{"line":33,"column":7}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":17}},{"start":{"line":33,"column":21},"end":{"line":33,"column":51}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":7}},{"start":{"line":36,"column":8},"end":{"line":36,"column":7}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":7}},{"start":{"line":42,"column":8},"end":{"line":42,"column":7}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":7}},{"start":{"line":45,"column":8},"end":{"line":45,"column":7}}]},"6":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":5}},{"start":{"line":52,"column":6},"end":{"line":52,"column":5}}]},"7":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":18},"end":{"line":72,"column":29}},{"start":{"line":72,"column":33},"end":{"line":72,"column":35}}]},"8":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":40},"end":{"line":73,"column":42}},{"start":{"line":73,"column":45},"end":{"line":73,"column":53}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"code":"import {PlaylistParser} from './PlaylistParser';\nimport {PlaylistStream} from './PlaylistStream';\nimport Logger = require('../../Utils/Logger');\n\n/**\n * M3U(8) files parser.\n */\nclass M3U extends PlaylistParser {\n  /**\n   * Constructor.\n   *\n   * @param data Playlist file data.\n   */\n  constructor(data: string) {\n    super(data);\n  }\n\n  /**\n   * Tries to parse stream.\n   *\n   * @return A promise resolved when parsing is done.\n   */\n  public parse(): Promise<PlaylistStream[]> {\n    return new Promise((resolve: Function, reject: Function): void => {\n      let currentStream: PlaylistStream;\n      const lines: string[] = this.content.split(/[\\r\\n]+/);\n      const extInfRegex: RegExp = /^\\s*#EXTINF\\s*:\\s*(\\-?\\d+)(.*),(.*)$/i;\n\n\n      lines.forEach((rawLine: string): void => {\n        const line = rawLine.trim();\n\n        if (!line || line.match(/^\\s*#(?!EXTINF)/i)) {\n          return;\n        }\n        if (line.match(extInfRegex)) {\n          const [, duration, metas, title] = extInfRegex.exec(line);\n\n          currentStream = this.parseInfos(title, duration, metas);\n          return;\n        }\n        if (!line.match(/^https?:\\/\\//i)) {\n          Logger.Debug(`Ignoring stream \"${line}\" (not http(s))`);\n        }\n        if (!currentStream) {\n         PlaylistParser.CreateDefaultStream();\n        }\n        currentStream.streamUrl = line;\n        this.streams.push(currentStream);\n        currentStream = undefined;\n      });\n      if (!this.streams.length) {\n        return reject(new Error('No streams found'));\n      }\n      return resolve(this.streams);\n    });\n  }\n\n  /**\n   * Parse grepped data from #EXTINF.\n   *\n   * @param parsedTitle     Stream title.\n   * @param parsedDuration Stream duration.\n   * @param parsedMetas    Stream metadatas.\n   */\n  private parseInfos(parsedTitle: string, parsedDuration: string, parsedMetas: string): PlaylistStream {\n    const duration: number = parseInt(parsedDuration, 10);\n    const metas: {} = {};\n    const fakeDiv = window.document.createElement('div');\n    const infos: PlaylistStream = PlaylistParser.CreateDefaultStream();\n\n    infos.title = parsedTitle || '';\n    infos.duration = ((duration < -1) ? -1 : duration);\n    // Should be safe as never inserted to dom, but not so elegant...\n    // @todo find an alternative\n    /* tslint:disable: no-inner-html */\n    fakeDiv.innerHTML = `<p ${parsedMetas}></p>`;\n    /* tslint:enable: no-inner-html */\n    [].slice.call(fakeDiv.firstChild.attributes).forEach(\n      (attribute: Attr): void => {\n        (<any>metas)[attribute.name] = attribute.value;\n      }\n    );\n    return infos;\n  }\n}\n\nexport = M3U;\n","l":{"1":1,"3":1,"8":1,"14":1,"15":0,"23":1,"24":0,"25":0,"26":0,"27":0,"30":0,"31":0,"33":0,"34":0,"36":0,"37":0,"39":0,"40":0,"42":0,"43":0,"45":0,"46":0,"48":0,"49":0,"50":0,"52":0,"53":0,"55":0,"66":1,"67":0,"68":0,"69":0,"70":0,"72":0,"73":0,"77":0,"79":0,"81":0,"84":0,"86":1,"88":1}},
"src/Icecast/PlaylistParser/PlaylistParser.ts":{"path":"src/Icecast/PlaylistParser/PlaylistParser.ts","statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":53,"column":1}},"2":{"start":{"line":21,"column":2},"end":{"line":27,"column":3}},"3":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"4":{"start":{"line":23,"column":6},"end":{"line":23,"column":45}},"5":{"start":{"line":25,"column":4},"end":{"line":25,"column":24}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":22}},"7":{"start":{"line":32,"column":9},"end":{"line":34,"column":3}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":24}},"9":{"start":{"line":44,"column":19},"end":{"line":52,"column":3}},"10":{"start":{"line":45,"column":4},"end":{"line":51,"column":6}},"11":{"start":{"line":53,"column":0},"end":{"line":53,"column":1}},"12":{"start":{"line":6,"column":22},"end":{"line":53,"column":1}}},"fnMap":{"1":{"name":"(anonymous_834)","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"PlaylistParser","line":21,"loc":{"start":{"line":21,"column":2},"end":{"line":21,"column":26}}},"3":{"name":"(anonymous_836)","line":32,"loc":{"start":{"line":32,"column":2},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_837)","line":44,"loc":{"start":{"line":44,"column":2},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":3}},{"start":{"line":22,"column":4},"end":{"line":22,"column":3}}]}},"s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":1},"b":{"1":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0},"code":"import {PlaylistStream} from './PlaylistStream';\n\n/**\n * Playlist parsers base class.\n */\nexport abstract class PlaylistParser {\n  /**\n   * Playlist file content.\n   */\n  protected content: string;\n  /**\n   * Playlist's streams.\n   */\n  protected streams: PlaylistStream[];\n\n  /**\n   * Constructor.\n   *\n   * @param data Playlist file data.\n   */\n  constructor(data: string) {\n    if (!data) {\n      throw new Error('Empty playlist file');\n    }\n    this.content = data;\n    this.streams = [];\n  }\n\n  /**\n   * Get playlist streams.\n   */\n  public getStreams(): PlaylistStream[] {\n    return this.streams;\n  }\n\n  /**\n   * Parses playlist.\n   */\n  public abstract parse(): Promise<PlaylistStream[]>;\n\n  /**\n   * Generate a default stream with empty data for non EXTM3U streams.\n   */\n  protected static CreateDefaultStream(): PlaylistStream {\n    return {\n      title    : '',\n      duration : -1,\n      description : '',\n      metas    : {},\n      streamUrl: '',\n    };\n  }\n}\n","l":{"6":1,"21":1,"22":0,"23":0,"25":0,"26":0,"32":1,"33":0,"44":1,"45":0,"53":1}},
"src/Icecast/PlaylistParser/XSPF.ts":{"path":"src/Icecast/PlaylistParser/XSPF.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"4":{"start":{"line":10,"column":0},"end":{"line":150,"column":1}},"5":{"start":{"line":10,"column":19},"end":{"line":10,"column":33}},"6":{"start":{"line":16,"column":2},"end":{"line":18,"column":3}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":16}},"8":{"start":{"line":25,"column":9},"end":{"line":39,"column":3}},"9":{"start":{"line":25,"column":2},"end":{"line":39,"column":3}},"10":{"start":{"line":26,"column":4},"end":{"line":38,"column":7}},"11":{"start":{"line":27,"column":6},"end":{"line":27,"column":48}},"12":{"start":{"line":28,"column":6},"end":{"line":28,"column":84}},"13":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"14":{"start":{"line":31,"column":8},"end":{"line":31,"column":46}},"15":{"start":{"line":33,"column":6},"end":{"line":33,"column":45}},"16":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"17":{"start":{"line":35,"column":8},"end":{"line":35,"column":53}},"18":{"start":{"line":37,"column":6},"end":{"line":37,"column":35}},"19":{"start":{"line":46,"column":10},"end":{"line":68,"column":3}},"20":{"start":{"line":46,"column":2},"end":{"line":68,"column":3}},"21":{"start":{"line":47,"column":4},"end":{"line":47,"column":69}},"22":{"start":{"line":48,"column":4},"end":{"line":48,"column":39}},"23":{"start":{"line":50,"column":4},"end":{"line":65,"column":7}},"24":{"start":{"line":51,"column":6},"end":{"line":51,"column":29}},"25":{"start":{"line":52,"column":6},"end":{"line":52,"column":36}},"26":{"start":{"line":54,"column":6},"end":{"line":61,"column":9}},"27":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"28":{"start":{"line":56,"column":10},"end":{"line":56,"column":43}},"29":{"start":{"line":58,"column":8},"end":{"line":60,"column":9}},"30":{"start":{"line":59,"column":10},"end":{"line":59,"column":28}},"31":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"32":{"start":{"line":63,"column":8},"end":{"line":63,"column":79}},"33":{"start":{"line":66,"column":4},"end":{"line":66,"column":26}},"34":{"start":{"line":67,"column":4},"end":{"line":67,"column":19}},"35":{"start":{"line":75,"column":10},"end":{"line":132,"column":3}},"36":{"start":{"line":75,"column":2},"end":{"line":132,"column":3}},"37":{"start":{"line":76,"column":4},"end":{"line":76,"column":41}},"38":{"start":{"line":78,"column":4},"end":{"line":130,"column":7}},"39":{"start":{"line":79,"column":6},"end":{"line":79,"column":74}},"40":{"start":{"line":80,"column":6},"end":{"line":80,"column":27}},"41":{"start":{"line":81,"column":6},"end":{"line":81,"column":39}},"42":{"start":{"line":82,"column":6},"end":{"line":82,"column":26}},"43":{"start":{"line":83,"column":6},"end":{"line":83,"column":35}},"44":{"start":{"line":84,"column":6},"end":{"line":84,"column":32}},"45":{"start":{"line":86,"column":6},"end":{"line":110,"column":9}},"46":{"start":{"line":87,"column":8},"end":{"line":89,"column":9}},"47":{"start":{"line":88,"column":10},"end":{"line":88,"column":36}},"48":{"start":{"line":90,"column":8},"end":{"line":98,"column":9}},"49":{"start":{"line":91,"column":10},"end":{"line":91,"column":69}},"50":{"start":{"line":93,"column":10},"end":{"line":96,"column":11}},"51":{"start":{"line":94,"column":12},"end":{"line":94,"column":64}},"52":{"start":{"line":95,"column":12},"end":{"line":95,"column":19}},"53":{"start":{"line":97,"column":10},"end":{"line":97,"column":22}},"54":{"start":{"line":99,"column":8},"end":{"line":101,"column":9}},"55":{"start":{"line":100,"column":10},"end":{"line":100,"column":76}},"56":{"start":{"line":102,"column":8},"end":{"line":104,"column":9}},"57":{"start":{"line":103,"column":10},"end":{"line":103,"column":42}},"58":{"start":{"line":105,"column":8},"end":{"line":109,"column":9}},"59":{"start":{"line":106,"column":10},"end":{"line":106,"column":56}},"60":{"start":{"line":108,"column":10},"end":{"line":108,"column":56}},"61":{"start":{"line":111,"column":6},"end":{"line":114,"column":7}},"62":{"start":{"line":112,"column":8},"end":{"line":112,"column":60}},"63":{"start":{"line":113,"column":8},"end":{"line":113,"column":15}},"64":{"start":{"line":115,"column":6},"end":{"line":115,"column":27}},"65":{"start":{"line":116,"column":6},"end":{"line":116,"column":39}},"66":{"start":{"line":117,"column":6},"end":{"line":117,"column":33}},"67":{"start":{"line":118,"column":6},"end":{"line":118,"column":29}},"68":{"start":{"line":119,"column":6},"end":{"line":119,"column":27}},"69":{"start":{"line":120,"column":6},"end":{"line":122,"column":7}},"70":{"start":{"line":121,"column":8},"end":{"line":121,"column":39}},"71":{"start":{"line":123,"column":6},"end":{"line":125,"column":7}},"72":{"start":{"line":124,"column":8},"end":{"line":124,"column":44}},"73":{"start":{"line":126,"column":6},"end":{"line":128,"column":7}},"74":{"start":{"line":127,"column":8},"end":{"line":127,"column":47}},"75":{"start":{"line":129,"column":6},"end":{"line":129,"column":27}},"76":{"start":{"line":131,"column":4},"end":{"line":131,"column":19}},"77":{"start":{"line":138,"column":10},"end":{"line":149,"column":3}},"78":{"start":{"line":139,"column":4},"end":{"line":139,"column":26}},"79":{"start":{"line":141,"column":4},"end":{"line":147,"column":7}},"80":{"start":{"line":142,"column":6},"end":{"line":146,"column":7}},"81":{"start":{"line":143,"column":8},"end":{"line":143,"column":38}},"82":{"start":{"line":145,"column":8},"end":{"line":145,"column":81}},"83":{"start":{"line":148,"column":4},"end":{"line":148,"column":17}},"84":{"start":{"line":150,"column":0},"end":{"line":150,"column":1}},"85":{"start":{"line":152,"column":0},"end":{"line":152,"column":14}}},"fnMap":{"1":{"name":"(anonymous_841)","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"XSPF","line":16,"loc":{"start":{"line":16,"column":2},"end":{"line":16,"column":26}}},"3":{"name":"(anonymous_843)","line":25,"loc":{"start":{"line":25,"column":2},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_844)","line":26,"loc":{"start":{"line":26,"column":23},"end":{"line":26,"column":59}}},"5":{"name":"(anonymous_845)","line":46,"loc":{"start":{"line":46,"column":2},"end":{"line":46,"column":37}}},"6":{"name":"(anonymous_846)","line":50,"loc":{"start":{"line":50,"column":37},"end":{"line":50,"column":55}}},"7":{"name":"(anonymous_847)","line":54,"loc":{"start":{"line":54,"column":49},"end":{"line":54,"column":64}}},"8":{"name":"(anonymous_848)","line":75,"loc":{"start":{"line":75,"column":2},"end":{"line":75,"column":65}}},"9":{"name":"(anonymous_849)","line":78,"loc":{"start":{"line":78,"column":67},"end":{"line":78,"column":82}}},"10":{"name":"(anonymous_850)","line":86,"loc":{"start":{"line":86,"column":46},"end":{"line":86,"column":61}}},"11":{"name":"(anonymous_851)","line":138,"loc":{"start":{"line":138,"column":2},"end":{"line":138,"column":52}}},"12":{"name":"(anonymous_852)","line":141,"loc":{"start":{"line":141,"column":37},"end":{"line":141,"column":50}}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":5}},{"start":{"line":30,"column":6},"end":{"line":30,"column":5}}]},"2":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":5}},{"start":{"line":34,"column":6},"end":{"line":34,"column":5}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":7}},{"start":{"line":55,"column":8},"end":{"line":55,"column":7}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":7}},{"start":{"line":58,"column":8},"end":{"line":58,"column":7}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":5}},{"start":{"line":62,"column":6},"end":{"line":62,"column":5}}]},"6":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":87,"column":7}},{"start":{"line":87,"column":8},"end":{"line":87,"column":7}}]},"7":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":12},"end":{"line":87,"column":37}},{"start":{"line":87,"column":41},"end":{"line":87,"column":58}}]},"8":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":7}},{"start":{"line":90,"column":8},"end":{"line":90,"column":7}}]},"9":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":40}},{"start":{"line":90,"column":44},"end":{"line":90,"column":61}}]},"10":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":10},"end":{"line":93,"column":9}},{"start":{"line":93,"column":10},"end":{"line":93,"column":9}}]},"11":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":8},"end":{"line":99,"column":7}},{"start":{"line":99,"column":8},"end":{"line":99,"column":7}}]},"12":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":12},"end":{"line":99,"column":42}},{"start":{"line":99,"column":46},"end":{"line":99,"column":63}}]},"13":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":7}},{"start":{"line":102,"column":8},"end":{"line":102,"column":7}}]},"14":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":12},"end":{"line":102,"column":36}},{"start":{"line":102,"column":40},"end":{"line":102,"column":57}}]},"15":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":7}},{"start":{"line":105,"column":8},"end":{"line":105,"column":7}}]},"16":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":40}},{"start":{"line":105,"column":44},"end":{"line":105,"column":61}}]},"17":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":36},"end":{"line":108,"column":38}},{"start":{"line":108,"column":42},"end":{"line":108,"column":54}}]},"18":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":111,"column":5}},{"start":{"line":111,"column":6},"end":{"line":111,"column":5}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":6},"end":{"line":120,"column":5}},{"start":{"line":120,"column":6},"end":{"line":120,"column":5}}]},"20":{"line":120,"type":"binary-expr","locations":[{"start":{"line":120,"column":10},"end":{"line":120,"column":23}},{"start":{"line":120,"column":28},"end":{"line":120,"column":61}}]},"21":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":6},"end":{"line":123,"column":5}},{"start":{"line":123,"column":6},"end":{"line":123,"column":5}}]},"22":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":5}},{"start":{"line":126,"column":6},"end":{"line":126,"column":5}}]},"23":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":10},"end":{"line":126,"column":29}},{"start":{"line":126,"column":33},"end":{"line":126,"column":56}}]},"24":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":6},"end":{"line":142,"column":5}},{"start":{"line":142,"column":6},"end":{"line":142,"column":5}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"code":"import {PlaylistParser} from './PlaylistParser';\nimport {PlaylistStream} from './PlaylistStream';\n\nimport Logger = require('../../Utils/Logger');\nimport Utils = require('../../Utils/Various');\n\n/**\n * XSPF files parser.\n */\nclass XSPF extends PlaylistParser {\n  /**\n   * Constructor.\n   *\n   * @param data Playlist file data.\n   */\n  constructor(data: string) {\n    super(data);\n  }\n\n  /**\n   * Tries to parse stream.\n   *\n   * @return A promise resolved when parsing is done.\n   */\n  public parse(): Promise<PlaylistStream[]> {\n    return new Promise((resolve: Function, reject: Function): void => {\n      const parser: DOMParser = new DOMParser();\n      const doc: Document = parser.parseFromString(this.content, 'application/xml');\n\n      if (doc.getElementsByTagName('parsererror').length) {\n        return reject(new Error('XML error'));\n      }\n      this.streams = this.parsePlaylist(doc);\n      if (!this.streams.length) {\n        return reject(new Error('No streams found'));\n      }\n      return resolve(this.streams);\n    });\n  }\n\n  /**\n   * Extract streams from the <playlist> tags.\n   *\n   * @param doc Parsed playlist document.\n   */\n  private parsePlaylist(doc: Document): PlaylistStream[] {\n    const playlists: NodeList = doc.getElementsByTagName('playlist');\n    let streams: PlaylistStream[] = [];\n\n    [].slice.call(playlists).forEach((playlist: Element): void => {\n      let trackList: Element;\n      let defaultTitle: string = '';\n\n      [].slice.call(playlist.childNodes).forEach((child: Element): void => {\n        if (child.tagName === 'title') {\n          defaultTitle = child.textContent;\n        }\n        if (child.tagName === 'trackList') {\n          trackList = child;\n        }\n      });\n      if (trackList) {\n        streams = streams.concat(this.parseTrackList(trackList, defaultTitle));\n      }\n    });\n    Logger.Debug(streams);\n    return streams;\n  }\n  /**\n   * Extract streams from the <trackList> tags.\n   *\n   * @param trackList    <trackList> to parse.\n   * @param defaultTitle Default stream title.\n   */\n  private parseTrackList(trackList: Element, defaultTitle: string): PlaylistStream[] {\n    const streams: PlaylistStream[] = [];\n\n    [].slice.call(trackList.getElementsByTagName('track')).forEach((track: Element): void => {\n      const stream: PlaylistStream = PlaylistParser.CreateDefaultStream();\n      let url: string = '';\n      let title: string = defaultTitle;\n      let metas: any = {};\n      let description: string = '';\n      let duration: number = -1;\n\n      [].slice.call(track.childNodes).forEach((child: Element): void => {\n        if (child.tagName === 'title' && child.textContent) {\n          title = child.textContent;\n        }\n        if (child.tagName === 'location' && child.textContent) {\n          const value = child.textContent.trim().toLocaleLowerCase();\n\n          if (!value.match(/^https?:\\/\\//i)) {\n            Logger.Debug(`Ignoring non http-stream : ${value}`);\n            return;\n          }\n          url = value;\n        }\n        if (child.tagName === 'annotation' && child.textContent) {\n          metas = this.extractMetasFromAnnotation(child.textContent.trim());\n        }\n        if (child.tagName === 'info' && child.textContent) {\n          description = child.textContent;\n        }\n        if (child.tagName === 'duration' && child.textContent) {\n          const value = parseInt(child.textContent, 10);\n\n          duration = isNaN(value) ? -1 : (value / 1000);\n        }\n      });\n      if (!url) {\n        Logger.Debug('Skipping streamless track : ', track);\n        return;\n      }\n      stream.title = title;\n      stream.description = description;\n      stream.duration = duration;\n      stream.streamUrl = url;\n      stream.metas = metas;\n      if (metas.bitrate && (typeof metas.bitrate === 'number')) {\n        stream.bitrate = metas.bitrate;\n      }\n      if (metas.contentType) {\n        stream.mimeType = metas.contentType;\n      }\n      if (!stream.description && metas.streamDescription) {\n        stream.description = metas.description;\n      }\n      streams.push(stream);\n    });\n    return streams;\n  }\n  /**\n   * Extract metas from Icecast formatted annotation tag.\n   *\n   * @param content Tag content.\n   */\n  private extractMetasFromAnnotation(content: string): any {\n    const metas: any = {};\n\n    content.split(/[\\r\\n]+/).forEach((line: string): void => {\n      if (line.indexOf(':') !== -1) {\n        const parts = line.split(':');\n\n        metas[Utils.Camelize(parts[0].trim())] = parts.slice(1).join(':').trim();\n      }\n    });\n    return metas;\n  }\n}\n\nexport = XSPF;\n","l":{"1":1,"4":1,"5":1,"10":1,"16":1,"17":0,"25":1,"26":0,"27":0,"28":0,"30":0,"31":0,"33":0,"34":0,"35":0,"37":0,"46":1,"47":0,"48":0,"50":0,"51":0,"52":0,"54":0,"55":0,"56":0,"58":0,"59":0,"62":0,"63":0,"66":0,"67":0,"75":1,"76":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"88":0,"90":0,"91":0,"93":0,"94":0,"95":0,"97":0,"99":0,"100":0,"102":0,"103":0,"105":0,"106":0,"108":0,"111":0,"112":0,"113":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"123":0,"124":0,"126":0,"127":0,"129":0,"131":0,"138":1,"139":0,"141":0,"142":0,"143":0,"145":0,"148":0,"150":1,"152":1}},
"src/Icecast/Source.ts":{"path":"src/Icecast/Source.ts","statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":30}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":38}},"5":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}},"7":{"start":{"line":12,"column":0},"end":{"line":12,"column":47}},"8":{"start":{"line":14,"column":0},"end":{"line":14,"column":36}},"9":{"start":{"line":20,"column":0},"end":{"line":240,"column":1}},"10":{"start":{"line":49,"column":2},"end":{"line":70,"column":3}},"11":{"start":{"line":50,"column":4},"end":{"line":50,"column":70}},"12":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"13":{"start":{"line":53,"column":6},"end":{"line":53,"column":37}},"14":{"start":{"line":55,"column":4},"end":{"line":55,"column":19}},"15":{"start":{"line":56,"column":4},"end":{"line":63,"column":5}},"16":{"start":{"line":61,"column":6},"end":{"line":61,"column":53}},"17":{"start":{"line":62,"column":6},"end":{"line":62,"column":13}},"18":{"start":{"line":65,"column":4},"end":{"line":65,"column":65}},"19":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"20":{"start":{"line":68,"column":6},"end":{"line":68,"column":46}},"21":{"start":{"line":75,"column":9},"end":{"line":143,"column":3}},"22":{"start":{"line":75,"column":2},"end":{"line":143,"column":3}},"23":{"start":{"line":76,"column":4},"end":{"line":76,"column":52}},"24":{"start":{"line":77,"column":4},"end":{"line":77,"column":30}},"25":{"start":{"line":79,"column":4},"end":{"line":107,"column":5}},"26":{"start":{"line":80,"column":6},"end":{"line":106,"column":11}},"27":{"start":{"line":83,"column":10},"end":{"line":83,"column":46}},"28":{"start":{"line":85,"column":10},"end":{"line":100,"column":13}},"29":{"start":{"line":86,"column":12},"end":{"line":99,"column":13}},"30":{"start":{"line":87,"column":14},"end":{"line":96,"column":15}},"31":{"start":{"line":89,"column":18},"end":{"line":89,"column":35}},"32":{"start":{"line":90,"column":18},"end":{"line":90,"column":24}},"33":{"start":{"line":92,"column":18},"end":{"line":92,"column":37}},"34":{"start":{"line":93,"column":18},"end":{"line":93,"column":24}},"35":{"start":{"line":95,"column":18},"end":{"line":95,"column":36}},"36":{"start":{"line":98,"column":14},"end":{"line":98,"column":33}},"37":{"start":{"line":101,"column":10},"end":{"line":101,"column":89}},"38":{"start":{"line":101,"column":69},"end":{"line":101,"column":87}},"39":{"start":{"line":102,"column":10},"end":{"line":104,"column":11}},"40":{"start":{"line":103,"column":12},"end":{"line":103,"column":68}},"41":{"start":{"line":105,"column":10},"end":{"line":105,"column":31}},"42":{"start":{"line":108,"column":4},"end":{"line":142,"column":9}},"43":{"start":{"line":109,"column":6},"end":{"line":111,"column":7}},"44":{"start":{"line":110,"column":8},"end":{"line":110,"column":43}},"45":{"start":{"line":112,"column":6},"end":{"line":112,"column":84}},"46":{"start":{"line":114,"column":6},"end":{"line":132,"column":7}},"47":{"start":{"line":115,"column":8},"end":{"line":124,"column":9}},"48":{"start":{"line":117,"column":12},"end":{"line":117,"column":36}},"49":{"start":{"line":118,"column":12},"end":{"line":118,"column":18}},"50":{"start":{"line":120,"column":12},"end":{"line":120,"column":36}},"51":{"start":{"line":121,"column":12},"end":{"line":121,"column":18}},"52":{"start":{"line":123,"column":12},"end":{"line":123,"column":89}},"53":{"start":{"line":125,"column":8},"end":{"line":125,"column":45}},"54":{"start":{"line":127,"column":8},"end":{"line":130,"column":10}},"55":{"start":{"line":131,"column":8},"end":{"line":131,"column":32}},"56":{"start":{"line":133,"column":6},"end":{"line":133,"column":27}},"57":{"start":{"line":136,"column":8},"end":{"line":138,"column":11}},"58":{"start":{"line":137,"column":10},"end":{"line":137,"column":51}},"59":{"start":{"line":141,"column":8},"end":{"line":141,"column":59}},"60":{"start":{"line":147,"column":2},"end":{"line":149,"column":3}},"61":{"start":{"line":148,"column":4},"end":{"line":148,"column":33}},"62":{"start":{"line":153,"column":9},"end":{"line":155,"column":3}},"63":{"start":{"line":154,"column":4},"end":{"line":154,"column":24}},"64":{"start":{"line":160,"column":10},"end":{"line":194,"column":3}},"65":{"start":{"line":160,"column":2},"end":{"line":194,"column":3}},"66":{"start":{"line":162,"column":4},"end":{"line":193,"column":9}},"67":{"start":{"line":173,"column":8},"end":{"line":173,"column":35}},"68":{"start":{"line":175,"column":8},"end":{"line":192,"column":13}},"69":{"start":{"line":177,"column":12},"end":{"line":177,"column":57}},"70":{"start":{"line":178,"column":12},"end":{"line":178,"column":59}},"71":{"start":{"line":180,"column":12},"end":{"line":190,"column":13}},"72":{"start":{"line":182,"column":16},"end":{"line":182,"column":40}},"73":{"start":{"line":183,"column":16},"end":{"line":183,"column":22}},"74":{"start":{"line":186,"column":16},"end":{"line":186,"column":39}},"75":{"start":{"line":187,"column":16},"end":{"line":187,"column":22}},"76":{"start":{"line":189,"column":16},"end":{"line":189,"column":57}},"77":{"start":{"line":191,"column":12},"end":{"line":191,"column":34}},"78":{"start":{"line":203,"column":17},"end":{"line":239,"column":3}},"79":{"start":{"line":204,"column":4},"end":{"line":204,"column":26}},"80":{"start":{"line":206,"column":4},"end":{"line":208,"column":5}},"81":{"start":{"line":207,"column":6},"end":{"line":207,"column":18}},"82":{"start":{"line":209,"column":4},"end":{"line":209,"column":39}},"83":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"84":{"start":{"line":212,"column":6},"end":{"line":212,"column":18}},"85":{"start":{"line":214,"column":4},"end":{"line":233,"column":5}},"86":{"start":{"line":216,"column":8},"end":{"line":216,"column":38}},"87":{"start":{"line":217,"column":8},"end":{"line":217,"column":14}},"88":{"start":{"line":220,"column":8},"end":{"line":220,"column":33}},"89":{"start":{"line":221,"column":8},"end":{"line":221,"column":14}},"90":{"start":{"line":223,"column":8},"end":{"line":223,"column":28}},"91":{"start":{"line":224,"column":8},"end":{"line":224,"column":14}},"92":{"start":{"line":226,"column":8},"end":{"line":226,"column":27}},"93":{"start":{"line":227,"column":8},"end":{"line":227,"column":14}},"94":{"start":{"line":229,"column":8},"end":{"line":229,"column":27}},"95":{"start":{"line":230,"column":8},"end":{"line":230,"column":14}},"96":{"start":{"line":232,"column":8},"end":{"line":232,"column":20}},"97":{"start":{"line":234,"column":4},"end":{"line":237,"column":6}},"98":{"start":{"line":238,"column":4},"end":{"line":238,"column":16}},"99":{"start":{"line":37,"column":17},"end":{"line":41,"column":4}},"100":{"start":{"line":240,"column":0},"end":{"line":240,"column":1}},"101":{"start":{"line":242,"column":0},"end":{"line":242,"column":16}}},"fnMap":{"1":{"name":"(anonymous_854)","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"Source","line":49,"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":44}}},"3":{"name":"(anonymous_856)","line":75,"loc":{"start":{"line":75,"column":2},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_857)","line":82,"loc":{"start":{"line":82,"column":14},"end":{"line":82,"column":40}}},"5":{"name":"(anonymous_858)","line":85,"loc":{"start":{"line":85,"column":26},"end":{"line":85,"column":49}}},"6":{"name":"(anonymous_859)","line":101,"loc":{"start":{"line":101,"column":41},"end":{"line":101,"column":64}}},"7":{"name":"(anonymous_860)","line":108,"loc":{"start":{"line":108,"column":24},"end":{"line":108,"column":59}}},"8":{"name":"(anonymous_861)","line":135,"loc":{"start":{"line":135,"column":12},"end":{"line":135,"column":38}}},"9":{"name":"(anonymous_862)","line":136,"loc":{"start":{"line":136,"column":36},"end":{"line":136,"column":73}}},"10":{"name":"(anonymous_863)","line":140,"loc":{"start":{"line":140,"column":36},"end":{"line":null,"column":-1}}},"11":{"name":"(anonymous_864)","line":147,"loc":{"start":{"line":147,"column":2},"end":{"line":null,"column":-1}}},"12":{"name":"(anonymous_865)","line":153,"loc":{"start":{"line":153,"column":2},"end":{"line":null,"column":-1}}},"13":{"name":"(anonymous_866)","line":160,"loc":{"start":{"line":160,"column":2},"end":{"line":null,"column":-1}}},"14":{"name":"(anonymous_867)","line":172,"loc":{"start":{"line":172,"column":12},"end":{"line":172,"column":31}}},"15":{"name":"(anonymous_868)","line":176,"loc":{"start":{"line":176,"column":16},"end":{"line":176,"column":34}}},"16":{"name":"(anonymous_869)","line":203,"loc":{"start":{"line":203,"column":2},"end":{"line":203,"column":58}}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":35},"end":{"line":50,"column":43}},{"start":{"line":50,"column":47},"end":{"line":50,"column":69}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":3}},{"start":{"line":52,"column":4},"end":{"line":52,"column":3}}]},"3":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":3}},{"start":{"line":56,"column":4},"end":{"line":56,"column":3}}]},"4":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":11}},{"start":{"line":58,"column":6},"end":{"line":58,"column":26}},{"start":{"line":59,"column":7},"end":{"line":59,"column":66}}]},"5":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":3}},{"start":{"line":67,"column":4},"end":{"line":67,"column":3}}]},"6":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":23}},{"start":{"line":67,"column":28},"end":{"line":67,"column":80}}]},"7":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":3}},{"start":{"line":79,"column":4},"end":{"line":79,"column":3}}]},"8":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":29}},{"start":{"line":79,"column":34},"end":{"line":79,"column":92}}]},"9":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":86,"column":11}},{"start":{"line":86,"column":12},"end":{"line":86,"column":11}}]},"10":{"line":88,"type":"switch","locations":[{"start":{"line":88,"column":16},"end":{"line":90,"column":24}},{"start":{"line":91,"column":16},"end":{"line":93,"column":24}},{"start":{"line":94,"column":16},"end":{"line":95,"column":36}}]},"11":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":10},"end":{"line":102,"column":9}},{"start":{"line":102,"column":10},"end":{"line":102,"column":9}}]},"12":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":6},"end":{"line":109,"column":5}},{"start":{"line":109,"column":6},"end":{"line":109,"column":5}}]},"13":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":5}},{"start":{"line":114,"column":6},"end":{"line":114,"column":5}}]},"14":{"line":116,"type":"switch","locations":[{"start":{"line":116,"column":10},"end":{"line":118,"column":18}},{"start":{"line":119,"column":10},"end":{"line":121,"column":18}},{"start":{"line":122,"column":10},"end":{"line":123,"column":89}}]},"15":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":19},"end":{"line":137,"column":26}},{"start":{"line":137,"column":30},"end":{"line":137,"column":31}}]},"16":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":36},"end":{"line":137,"column":43}},{"start":{"line":137,"column":47},"end":{"line":137,"column":48}}]},"17":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":18},"end":{"line":169,"column":33}},{"start":{"line":169,"column":37},"end":{"line":169,"column":61}},{"start":{"line":169,"column":65},"end":{"line":169,"column":94}}]},"18":{"line":181,"type":"switch","locations":[{"start":{"line":181,"column":14},"end":{"line":183,"column":22}},{"start":{"line":184,"column":14},"end":{"line":184,"column":38}},{"start":{"line":185,"column":14},"end":{"line":187,"column":22}},{"start":{"line":188,"column":14},"end":{"line":189,"column":57}}]},"19":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":4},"end":{"line":206,"column":3}},{"start":{"line":206,"column":4},"end":{"line":206,"column":3}}]},"20":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":3}},{"start":{"line":211,"column":4},"end":{"line":211,"column":3}}]},"21":{"line":211,"type":"binary-expr","locations":[{"start":{"line":211,"column":8},"end":{"line":211,"column":15}},{"start":{"line":211,"column":19},"end":{"line":211,"column":35}}]},"22":{"line":215,"type":"switch","locations":[{"start":{"line":215,"column":6},"end":{"line":217,"column":14}},{"start":{"line":218,"column":6},"end":{"line":218,"column":19}},{"start":{"line":219,"column":6},"end":{"line":221,"column":14}},{"start":{"line":222,"column":6},"end":{"line":224,"column":14}},{"start":{"line":225,"column":6},"end":{"line":227,"column":14}},{"start":{"line":228,"column":6},"end":{"line":230,"column":14}},{"start":{"line":231,"column":6},"end":{"line":232,"column":20}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":1,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":1,"101":1},"b":{"1":[1,0],"2":[1,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0]},"f":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"code":"import {PlaylistParser} from './PlaylistParser/PlaylistParser';\nimport {PlaylistStream} from './PlaylistParser/PlaylistStream';\n\n\nimport Path = require('path');\nimport Url = require('url');\nimport bufferLib = require('buffer');\nimport Bluebird = require('bluebird');\n\nimport Logger = require('../Utils/Logger');\nimport M3U = require('./PlaylistParser/M3U');\nimport XSPF = require('./PlaylistParser/XSPF');\n\nconst nodeBuffer = bufferLib.Buffer;\n\n\n/**\n * Streams and playlists handling.\n */\nclass Source {\n  /**\n   * Source url.\n   */\n  private url: string;\n  /**\n   * Audio streams.\n   */\n  private streams: PlaylistStream[];\n  /**\n   * Playlist file mimetype.\n   */\n  private playlistMimeType: string;\n\n  /**\n   * A map of mimeType => method for playlist parsers.\n   */\n  private static playlistTypes: string[] = [\n    'application/xspf+xml',\n    'audio/x-mpegurl',\n    'application/vnd.apple.mpegurl',\n  ];\n\n  /**\n   * Constructor.\n   *\n   * @param url        Stream url.\n   * @param [mimeType] Stream's mimetype.\n   */\n  constructor(url: string, mimeType?: string) {\n    const parts: string[] | void = mimeType && mimeType.split(/\\s*;/);\n\n    if (!this.url) {\n      throw new Error('Missing url');\n    }\n    this.url = url;\n    if (\n      parts &&\n      Array.isArray(parts) &&\n      (Source.playlistTypes.indexOf(parts[0].toLowerCase()) !== -1)\n    ) {\n      this.playlistMimeType = parts[0].toLowerCase();\n      return;\n    }\n\n    const guessedMimetype = Source.guessMimeTypeByExtension(url);\n\n    if (guessedMimetype && (Source.playlistTypes.indexOf(guessedMimetype) !== -1)) {\n      this.playlistMimeType = guessedMimetype;\n    }\n  }\n\n  /**\n   * Parse source (playlist or stream).\n   */\n  public load(): Bluebird<void> {\n    let promise: Bluebird<any> = Bluebird.resolve();\n    const audio = new Audio();\n\n    if (this.playlistMimeType && (Source.playlistTypes.indexOf(this.playlistMimeType) !== -1)) {\n      promise = Bluebird.resolve(this.parsePlaylist())\n        .timeout(1000)\n        .then((streams: PlaylistStream[]): PlaylistStream[] => {\n          let parsedStreams: PlaylistStream[];\n\n          streams.forEach((stream: PlaylistStream) => {\n            if (stream.mimeType) {\n              switch (audio.canPlayType(stream.mimeType)) {\n                case 'probably':\n                  stream.score = 1;\n                  break;\n                case 'maybe':\n                  stream.score = 0.8;\n                  break;\n                default:\n                  stream.score = -1;\n              }\n            } else {\n              stream.score = 0.7;\n            }\n          });\n          parsedStreams = streams.filter((stream: PlaylistStream) => (stream.score > 0));\n          if (!parsedStreams.length) {\n            throw new Error('No playable stream found in playlist');\n          }\n          return parsedStreams;\n        });\n    }\n    return promise.then((streams: (PlaylistStream[] | void)): PlaylistStream[] => {\n      if (streams) {\n        return (<PlaylistStream[]>streams);\n      }\n      const builtStream: PlaylistStream = (<PlaylistStream>{ streamUrl: this.url });\n\n      if (this.mimeType) {\n        switch (audio.canPlayType(this.mimeType)) {\n          case 'probably':\n            builtStream.score = 0.6;\n            break;\n          case 'maybe':\n            builtStream.score = 0.5;\n            break;\n          default:\n            throw new Error(`Browser cannot read a ${this.mimeType} streams / playlist`);\n        }\n        builtStream.mimeType = this.mimeType;\n      } else {\n        Logger.Info(\n          `${this.url} will be considered as an audio stream as no ` +\n          ' type attribute has been set and type cannot be guessed from extension'\n        );\n        builtStream.score = 0.1;\n      }\n      return [builtStream];\n    })\n      .then((streams: PlaylistStream[]): void => {\n        this.streams = streams.sort((a: PlaylistStream, b: PlaylistStream): number => {\n          return ((a.score || 0) - (b.score || 0));\n        });\n      })\n      .catch(Bluebird.TimeoutError, () => {\n        throw new Error('Timeout while fetching playlist');\n      });\n  }\n  /**\n   * Get source mimeType.\n   */\n  public get mimeType(): string {\n    return this.playlistMimeType;\n  }\n  /**\n   * Get source's streams.\n   */\n  public getStreams(): PlaylistStream[] {\n    return this.streams;\n  }\n\n  /**\n   * Parses stream's playlist file.\n   */\n  private parsePlaylist(): Promise<PlaylistStream[]> {\n\n    return window.fetch(\n      this.url,\n      {\n        method: 'GET',\n        mode: 'cors',\n        credentials: 'omit',\n        cache: 'no-cache',\n        referrer: window.document && window.document.location && window.document.location.href,\n      }\n    )\n      .then((response: Response): Promise<PlaylistStream[]> => {\n        let parser: PlaylistParser;\n\n        return response.arrayBuffer()\n          .then((body: ArrayBuffer): Promise<PlaylistStream[]> => {\n            const buffer: Buffer = nodeBuffer.from(body);\n            const text: string =  buffer.toString('utf-8');\n\n            switch (this.playlistMimeType) {\n              case 'application/xspf+xml' :\n                parser = new XSPF(text);\n                break;\n              case 'audio/x-mpegurl' :\n              case 'application/vnd.apple.mpegurl' :\n                parser = new M3U(text);\n                break;\n              default:\n                throw new Error('Unknown playlist type');\n            }\n            return parser.parse();\n          });\n      });\n  }\n\n  /**\n   * Tries to guess the mimetype with the extension in url.\n   *\n   * @param givenUrl Url to parse.\n   *\n   * @return Mimetype or empty string if could not guess.\n   */\n  private static guessMimeTypeByExtension(givenUrl: string): string {\n    let mime: string = '';\n\n    if (!givenUrl) {\n      return mime;\n    }\n    const urlObj = Url.parse(givenUrl);\n\n    if (!urlObj || !urlObj.pathname) {\n      return mime;\n    }\n    switch (Path.extname(urlObj.pathname).toLowerCase()) {\n      case '.xspf' :\n        mime = 'application/xspf+xml';\n        break;\n      case '.m3u' :\n      case '.m3u8' :\n        mime = 'audio/x-mpegurl';\n        break;\n      case '.mp3' :\n        mime = 'audio/mpeg';\n        break;\n      case '.aac' :\n        mime = 'audio/aac';\n        break;\n      case '.ogg' :\n        mime = 'audio/ogg';\n        break;\n      default:\n        return mime;\n    }\n    Logger.Debug(\n      `Guessed that ${givenUrl} is a ${mime}, that may be wrong,` +\n      'you should add a type attribute if it\\'s from an audio/source tag'\n    );\n    return mime;\n  }\n}\n\nexport = Source;\n","l":{"5":1,"6":1,"7":1,"8":1,"10":1,"11":1,"12":1,"14":1,"20":1,"37":1,"49":1,"50":1,"52":1,"53":1,"55":0,"56":0,"61":0,"62":0,"65":0,"67":0,"68":0,"75":1,"76":0,"77":0,"79":0,"80":0,"83":0,"85":0,"86":0,"87":0,"89":0,"90":0,"92":0,"93":0,"95":0,"98":0,"101":0,"102":0,"103":0,"105":0,"108":0,"109":0,"110":0,"112":0,"114":0,"115":0,"117":0,"118":0,"120":0,"121":0,"123":0,"125":0,"127":0,"131":0,"133":0,"136":0,"137":0,"141":0,"147":1,"148":0,"153":1,"154":0,"160":1,"162":0,"173":0,"175":0,"177":0,"178":0,"180":0,"182":0,"183":0,"186":0,"187":0,"189":0,"191":0,"203":1,"204":0,"206":0,"207":0,"209":0,"211":0,"212":0,"214":0,"216":0,"217":0,"220":0,"221":0,"223":0,"224":0,"226":0,"227":0,"229":0,"230":0,"232":0,"234":0,"238":0,"240":1,"242":1}},
"src/Utils/Logger.ts":{"path":"src/Utils/Logger.ts","statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":20,"column":2}},"2":{"start":{"line":44,"column":0},"end":{"line":60,"column":1}},"3":{"start":{"line":45,"column":9},"end":{"line":45,"column":33}},"4":{"start":{"line":46,"column":9},"end":{"line":46,"column":32}},"5":{"start":{"line":47,"column":9},"end":{"line":47,"column":30}},"6":{"start":{"line":48,"column":9},"end":{"line":48,"column":32}},"7":{"start":{"line":49,"column":9},"end":{"line":49,"column":32}},"8":{"start":{"line":50,"column":9},"end":{"line":50,"column":41}},"9":{"start":{"line":51,"column":9},"end":{"line":51,"column":35}},"10":{"start":{"line":52,"column":9},"end":{"line":52,"column":31}},"11":{"start":{"line":53,"column":9},"end":{"line":53,"column":30}},"12":{"start":{"line":54,"column":9},"end":{"line":54,"column":34}},"13":{"start":{"line":55,"column":9},"end":{"line":55,"column":37}},"14":{"start":{"line":56,"column":9},"end":{"line":56,"column":32}},"15":{"start":{"line":57,"column":9},"end":{"line":57,"column":31}},"16":{"start":{"line":58,"column":9},"end":{"line":58,"column":34}},"17":{"start":{"line":59,"column":9},"end":{"line":59,"column":31}},"18":{"start":{"line":60,"column":0},"end":{"line":60,"column":1}},"19":{"start":{"line":66,"column":0},"end":{"line":214,"column":1}},"20":{"start":{"line":100,"column":2},"end":{"line":102,"column":3}},"21":{"start":{"line":101,"column":4},"end":{"line":101,"column":57}},"22":{"start":{"line":109,"column":2},"end":{"line":114,"column":3}},"23":{"start":{"line":119,"column":4},"end":{"line":119,"column":31}},"24":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"25":{"start":{"line":111,"column":6},"end":{"line":111,"column":50}},"26":{"start":{"line":113,"column":4},"end":{"line":113,"column":44}},"27":{"start":{"line":126,"column":16},"end":{"line":128,"column":3}},"28":{"start":{"line":126,"column":22},"end":{"line":126,"column":38}},"29":{"start":{"line":127,"column":4},"end":{"line":127,"column":37}},"30":{"start":{"line":134,"column":16},"end":{"line":136,"column":3}},"31":{"start":{"line":134,"column":22},"end":{"line":134,"column":38}},"32":{"start":{"line":135,"column":4},"end":{"line":135,"column":37}},"33":{"start":{"line":142,"column":16},"end":{"line":144,"column":3}},"34":{"start":{"line":142,"column":21},"end":{"line":142,"column":37}},"35":{"start":{"line":143,"column":4},"end":{"line":143,"column":36}},"36":{"start":{"line":150,"column":16},"end":{"line":152,"column":3}},"37":{"start":{"line":150,"column":21},"end":{"line":150,"column":37}},"38":{"start":{"line":151,"column":4},"end":{"line":151,"column":39}},"39":{"start":{"line":158,"column":16},"end":{"line":160,"column":3}},"40":{"start":{"line":158,"column":22},"end":{"line":158,"column":38}},"41":{"start":{"line":159,"column":4},"end":{"line":159,"column":37}},"42":{"start":{"line":170,"column":17},"end":{"line":196,"column":3}},"43":{"start":{"line":171,"column":4},"end":{"line":171,"column":28}},"44":{"start":{"line":173,"column":4},"end":{"line":175,"column":5}},"45":{"start":{"line":174,"column":6},"end":{"line":174,"column":28}},"46":{"start":{"line":176,"column":4},"end":{"line":178,"column":5}},"47":{"start":{"line":177,"column":6},"end":{"line":177,"column":13}},"48":{"start":{"line":179,"column":4},"end":{"line":192,"column":5}},"49":{"start":{"line":181,"column":8},"end":{"line":181,"column":41}},"50":{"start":{"line":182,"column":8},"end":{"line":182,"column":14}},"51":{"start":{"line":184,"column":8},"end":{"line":184,"column":40}},"52":{"start":{"line":185,"column":8},"end":{"line":185,"column":14}},"53":{"start":{"line":187,"column":8},"end":{"line":187,"column":40}},"54":{"start":{"line":188,"column":8},"end":{"line":188,"column":14}},"55":{"start":{"line":190,"column":8},"end":{"line":190,"column":39}},"56":{"start":{"line":191,"column":8},"end":{"line":191,"column":14}},"57":{"start":{"line":193,"column":4},"end":{"line":193,"column":41}},"58":{"start":{"line":194,"column":4},"end":{"line":194,"column":34}},"59":{"start":{"line":195,"column":4},"end":{"line":195,"column":30}},"60":{"start":{"line":200,"column":17},"end":{"line":213,"column":3}},"61":{"start":{"line":201,"column":4},"end":{"line":201,"column":40}},"62":{"start":{"line":202,"column":4},"end":{"line":212,"column":5}},"63":{"start":{"line":203,"column":6},"end":{"line":203,"column":14}},"64":{"start":{"line":205,"column":6},"end":{"line":211,"column":7}},"65":{"start":{"line":205,"column":11},"end":{"line":205,"column":27}},"66":{"start":{"line":206,"column":8},"end":{"line":210,"column":9}},"67":{"start":{"line":207,"column":16},"end":{"line":207,"column":101}},"68":{"start":{"line":209,"column":16},"end":{"line":209,"column":62}},"69":{"start":{"line":70,"column":16},"end":{"line":70,"column":34}},"70":{"start":{"line":74,"column":16},"end":{"line":74,"column":34}},"71":{"start":{"line":78,"column":16},"end":{"line":78,"column":33}},"72":{"start":{"line":82,"column":16},"end":{"line":82,"column":36}},"73":{"start":{"line":86,"column":16},"end":{"line":86,"column":34}},"74":{"start":{"line":95,"column":17},"end":{"line":95,"column":42}},"75":{"start":{"line":214,"column":0},"end":{"line":214,"column":1}},"76":{"start":{"line":217,"column":0},"end":{"line":217,"column":16}}},"fnMap":{"1":{"name":"(anonymous_871)","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"(anonymous_873)","line":45,"loc":{"start":{"line":45,"column":2},"end":{"line":45,"column":31}}},"3":{"name":"(anonymous_874)","line":46,"loc":{"start":{"line":46,"column":2},"end":{"line":46,"column":30}}},"4":{"name":"(anonymous_875)","line":47,"loc":{"start":{"line":47,"column":2},"end":{"line":47,"column":28}}},"5":{"name":"(anonymous_876)","line":48,"loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":30}}},"6":{"name":"(anonymous_877)","line":49,"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":30}}},"7":{"name":"(anonymous_878)","line":50,"loc":{"start":{"line":50,"column":2},"end":{"line":50,"column":39}}},"8":{"name":"(anonymous_879)","line":51,"loc":{"start":{"line":51,"column":2},"end":{"line":51,"column":33}}},"9":{"name":"(anonymous_880)","line":52,"loc":{"start":{"line":52,"column":2},"end":{"line":52,"column":29}}},"10":{"name":"(anonymous_881)","line":53,"loc":{"start":{"line":53,"column":2},"end":{"line":53,"column":28}}},"11":{"name":"(anonymous_882)","line":54,"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":32}}},"12":{"name":"(anonymous_883)","line":55,"loc":{"start":{"line":55,"column":2},"end":{"line":55,"column":35}}},"13":{"name":"(anonymous_884)","line":56,"loc":{"start":{"line":56,"column":2},"end":{"line":56,"column":30}}},"14":{"name":"(anonymous_885)","line":57,"loc":{"start":{"line":57,"column":2},"end":{"line":57,"column":29}}},"15":{"name":"(anonymous_886)","line":58,"loc":{"start":{"line":58,"column":2},"end":{"line":58,"column":32}}},"16":{"name":"(anonymous_887)","line":59,"loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":29}}},"17":{"name":"(anonymous_888)","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":null,"column":-1}}},"18":{"name":"Logger","line":100,"loc":{"start":{"line":100,"column":2},"end":{"line":null,"column":-1}}},"19":{"name":"(anonymous_890)","line":118,"loc":{"start":{"line":118,"column":2},"end":{"line":null,"column":-1}}},"20":{"name":"(anonymous_891)","line":109,"loc":{"start":{"line":109,"column":2},"end":{"line":109,"column":39}}},"21":{"name":"(anonymous_892)","line":126,"loc":{"start":{"line":126,"column":2},"end":{"line":null,"column":-1}}},"22":{"name":"(anonymous_893)","line":134,"loc":{"start":{"line":134,"column":2},"end":{"line":null,"column":-1}}},"23":{"name":"(anonymous_894)","line":142,"loc":{"start":{"line":142,"column":2},"end":{"line":null,"column":-1}}},"24":{"name":"(anonymous_895)","line":150,"loc":{"start":{"line":150,"column":2},"end":{"line":null,"column":-1}}},"25":{"name":"(anonymous_896)","line":158,"loc":{"start":{"line":158,"column":2},"end":{"line":null,"column":-1}}},"26":{"name":"(anonymous_897)","line":170,"loc":{"start":{"line":170,"column":2},"end":{"line":170,"column":49}}},"27":{"name":"(anonymous_898)","line":200,"loc":{"start":{"line":200,"column":2},"end":{"line":null,"column":-1}}},"28":{"name":"(anonymous_899)","line":209,"loc":{"start":{"line":209,"column":46},"end":{"line":209,"column":59}}}},"branchMap":{"1":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":3}},{"start":{"line":110,"column":4},"end":{"line":110,"column":3}}]},"2":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":9},"end":{"line":110,"column":29}},{"start":{"line":110,"column":35},"end":{"line":110,"column":55}}]},"3":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":173,"column":3}},{"start":{"line":173,"column":4},"end":{"line":173,"column":3}}]},"4":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":176,"column":3}},{"start":{"line":176,"column":4},"end":{"line":176,"column":3}}]},"5":{"line":180,"type":"switch","locations":[{"start":{"line":180,"column":6},"end":{"line":182,"column":14}},{"start":{"line":183,"column":6},"end":{"line":185,"column":14}},{"start":{"line":186,"column":6},"end":{"line":188,"column":14}},{"start":{"line":189,"column":6},"end":{"line":191,"column":14}}]},"6":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":4},"end":{"line":202,"column":3}},{"start":{"line":202,"column":4},"end":{"line":202,"column":3}}]},"7":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":8},"end":{"line":206,"column":7}},{"start":{"line":206,"column":8},"end":{"line":206,"column":7}}]}},"s":{"1":1,"2":2,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":1,"31":0,"32":0,"33":1,"34":0,"35":0,"36":1,"37":0,"38":0,"39":1,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0],"6":[0,0],"7":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"code":"/**\n * Used console methods.\n */\nconst methods: string[] = [\n  'assert',\n  'clear',\n  'dir',\n  'error',\n  'group',\n  'groupCollapsed',\n  'groupEnd',\n  'info',\n  'log',\n  'profile',\n  'profileEnd',\n  'table',\n  'time',\n  'timeEnd',\n  'warn',\n];\n/**\n * Console object interface.\n */\ninterface ConsoleObject {\n  assert: Function;\n  clear: Function;\n  dir: Function;\n  error: Function;\n  group: Function;\n  groupCollapsed: Function;\n  groupEnd: Function;\n  info: Function;\n  log: Function;\n  profile: Function;\n  profileEnd: Function;\n  table: Function;\n  time: Function;\n  timeEnd: Function;\n  warn: Function;\n}\n/**\n * Empty (noop) console object if not available.\n */\nclass EmptyConsole implements ConsoleObject {\n  public assert() { /* noop */  }\n  public clear() { /* noop */  }\n  public dir() { /* noop */  }\n  public error() { /* noop */  }\n  public group() { /* noop */  }\n  public groupCollapsed() { /* noop */  }\n  public groupEnd() { /* noop */  }\n  public info() { /* noop */  }\n  public log() { /* noop */  }\n  public profile() { /* noop */  }\n  public profileEnd() { /* noop */  }\n  public table() { /* noop */  }\n  public time() { /* noop */  }\n  public timeEnd() { /* noop */  }\n  public warn() { /* noop */  }\n}\n\n/**\n * Logger object.\n */\n/* tslint:disable: no-stateless-class */\nclass Logger {\n  /**\n   * Log currentLevel : Trace.\n   */\n  public static TRACE: number = 1;\n  /**\n   * Log currentLevel : Debug.\n   */\n  public static DEBUG: number = 2;\n  /**\n   * Log currentLevel : Info.\n   */\n  public static INFO: number = 3;\n  /**\n   * Log currentLevel : warning.\n   */\n  public static WARNING: number = 4;\n  /**\n   * Log currentLevel : Error.\n   */\n  public static ERROR: number = 5;\n\n  /**\n   * Console object.\n   */\n  private static console: ConsoleObject;\n  /**\n   * Current logging currentLevel.\n   */\n  private static currentLevel: number = 4;\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    throw new Error('Logger should not be instantiated');\n  }\n\n  /**\n   * Set logging currentLevel.\n   *\n   * @param level Logging currentLevel (see Logger.* properties).\n   */\n  public static set level(level: number) {\n    if ((level < Logger.TRACE) || (level > Logger.ERROR)) {\n      throw new Error('Invalid log currentLevel');\n    }\n    Logger.currentLevel = Math.floor(level);\n  }\n  /**\n   * Get logging currentLevel.\n   */\n  public static get level(): number {\n    return Logger.currentLevel;\n  }\n  /**\n   * Trace Debug something.\n   *\n   * @param things Things to Trace Debug.\n   */\n  public static Trace(...things: any[]) {\n    Logger.log(Logger.TRACE, things);\n  }\n  /**\n   * Debug something.\n   *\n   * @param things Things to Debug.\n   */\n  public static Debug(...things: any[]) {\n    Logger.log(Logger.DEBUG, things);\n  }\n  /**\n   * Informs user about something.\n   *\n   * @param things Things to inform about.\n   */\n  public static Info(...things: any[]) {\n    Logger.log(Logger.INFO, things);\n  }\n  /**\n   * Warns user about something.\n   *\n   * @param things Things to Warn about.\n   */\n  public static Warn(...things: any[]) {\n    Logger.log(Logger.WARNING, things);\n  }\n  /**\n   * Shows a fatal Error to user.\n   *\n   * @param things Fatal Error(s).\n   */\n  public static Error(...things: any[]) {\n    Logger.log(Logger.ERROR, things);\n  }\n\n  /**\n   * Log routine.\n   *\n   * @param level  Log currentLevel.\n   * @param things Things to Debug.\n   *\n   * @return Nothing.\n   */\n  private static log(level: number, things: any[]) {\n    let logMethod: Function;\n\n    if (!Logger.console) {\n      Logger.setupConsole();\n    }\n    if (level < Logger.currentLevel) {\n      return;\n    }\n    switch (level) {\n      case 5:\n        logMethod = Logger.console.error;\n        break;\n      case 4:\n        logMethod = Logger.console.warn;\n        break;\n      case 3:\n        logMethod = Logger.console.info;\n        break;\n      default:\n        logMethod = Logger.console.log;\n        break;\n    }\n    Logger.console.group('[ICECAST.JS]');\n    logMethod.apply(null, things);\n    Logger.console.groupEnd();\n  }\n  /**\n   * Setups console object with browsers capabilities.\n   */\n  private static setupConsole() {\n    Logger.console = new EmptyConsole();\n    if (!window.console) {\n      return ;\n    } else {\n      for (const methodName of methods) {\n        if (typeof (<any>window.console)[methodName] === 'function') {\n          (<any>Logger.console)[methodName] = (<any>window.console)[methodName].bind(window.console);\n        } else {\n          (<any>Logger.console)[methodName] = () => { /* */ };\n        }\n      }\n    }\n  }\n}\n/* tslint:enable: no-stateless-class */\n\nexport = Logger;\n","l":{"4":1,"44":2,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"66":1,"70":1,"74":1,"78":1,"82":1,"86":1,"95":1,"100":1,"101":0,"109":1,"110":0,"111":0,"113":0,"119":0,"126":1,"127":0,"134":1,"135":0,"142":1,"143":0,"150":1,"151":0,"158":1,"159":0,"170":1,"171":0,"173":0,"174":0,"176":0,"177":0,"179":0,"181":0,"182":0,"184":0,"185":0,"187":0,"188":0,"190":0,"191":0,"193":0,"194":0,"195":0,"200":1,"201":0,"202":0,"203":0,"205":0,"206":0,"207":0,"209":0,"214":1,"217":1}},
"src/Utils/Various.ts":{"path":"src/Utils/Various.ts","statementMap":{"1":{"start":{"line":6,"column":0},"end":{"line":15,"column":2}},"2":{"start":{"line":11,"column":4},"end":{"line":13,"column":27}},"3":{"start":{"line":12,"column":6},"end":{"line":12,"column":73}}},"fnMap":{"1":{"name":"(anonymous_901)","line":10,"loc":{"start":{"line":10,"column":12},"end":{"line":10,"column":26}}},"2":{"name":"(anonymous_902)","line":11,"loc":{"start":{"line":11,"column":48},"end":{"line":11,"column":78}}}},"branchMap":{"1":{"line":12,"type":"cond-expr","locations":[{"start":{"line":12,"column":29},"end":{"line":12,"column":49}},{"start":{"line":12,"column":52},"end":{"line":12,"column":72}}]}},"s":{"1":1,"2":0,"3":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"code":"/**\n * Various utilies.\n *\n * @class\n */\nexport = {\n  /**\n   * Camel-Case a string.\n   */\n  Camelize: (value: string): string => {\n    return value.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (letter: string, index: number) => {\n      return (index === 0) ? letter.toLowerCase() : letter.toUpperCase();\n    }).replace(/\\s+/g, '');\n  },\n};\n","l":{"6":1,"11":0,"12":0}},
"test/specs/sources/Source/Source.browser.ts":{"path":"test/specs/sources/Source/Source.browser.ts","statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":60}},"2":{"start":{"line":6,"column":0},"end":{"line":15,"column":2}},"3":{"start":{"line":6,"column":32},"end":{"line":6,"column":46}},"4":{"start":{"line":7,"column":2},"end":{"line":14,"column":3}},"5":{"start":{"line":9,"column":6},"end":{"line":13,"column":7}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":43}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":27}}},"fnMap":{"1":{"name":"(anonymous_904)","line":6,"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":30}}}},"branchMap":{"1":{"line":8,"type":"switch","locations":[{"start":{"line":8,"column":4},"end":{"line":13,"column":7}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{"1":[1]},"f":{"1":1},"code":"/**\n * Source class tests.\n */\nimport Source = require('./../../../../src/Icecast/Source');\n\nwindow.runTest = (test: string, ...args: any[]) => {\n  switch (test) {\n    case 'constructor' :\n      try {\n        return new Source(<string>args[0]);\n      } catch (err) {\n        return err.message;\n      }\n  }\n};\n","l":{"4":1,"6":1,"7":1,"9":1,"10":1,"12":1}}}
